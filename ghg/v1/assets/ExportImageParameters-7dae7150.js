import{ay as u,bX as h,fB as p,dl as b,ai as t,aj as l,bx as d,am as g,an as f}from"./index-03946ec7.js";const S={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let a=class extends u(f){constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(s=>{const n=h(this.floors,s);return s.toExportImageJSON(n)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&p(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.handles.remove("layer"),e&&this.handles.add([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",s=>this.notifyChange(S[s.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(s=>s.id).join(","):"show:-1":null}get layerDefs(){var n;const e=!!((n=this.floors)!=null&&n.length),s=this.visibleSublayers.filter(i=>i.definitionExpression!=null||e&&i.floorInfo!=null);return s.length?JSON.stringify(s.reduce((i,r)=>{const y=h(this.floors,r),o=b(y,r.definitionExpression);return o!=null&&(i[r.id]=o),i},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers"),this.commitProperty("timeExtent");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const s=this.layer.sublayers,n=r=>{const y=this.scale,o=y===0,m=r.minScale===0||y<=r.minScale,c=r.maxScale===0||y>=r.maxScale;r.visible&&(o||m&&c)&&(r.sublayers?r.sublayers.forEach(n):e.unshift(r))};s&&s.forEach(n);const i=this._get("visibleSublayers");return!i||i.length!==e.length||i.some((r,y)=>e[y]!==r)?e:i}toJSON(){const e=this.layer;let s={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?s.dynamicLayers=this.dynamicLayers:s={...s,layers:this.layers,layerDefs:this.layerDefs},s}};t([l({readOnly:!0})],a.prototype,"dynamicLayers",null),t([l()],a.prototype,"floors",void 0),t([l({readOnly:!0})],a.prototype,"hasDynamicLayers",null),t([l()],a.prototype,"layer",null),t([l({readOnly:!0})],a.prototype,"layers",null),t([l({readOnly:!0})],a.prototype,"layerDefs",null),t([l({type:Number})],a.prototype,"scale",void 0),t([l(d)],a.prototype,"timeExtent",void 0),t([l({readOnly:!0})],a.prototype,"version",null),t([l({readOnly:!0})],a.prototype,"visibleSublayers",null),a=t([g("esri.layers.mixins.ExportImageParameters")],a);export{a as m};
